server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api
spring:
  jackson:
    serialization:
      indent-output: true
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    availability-zones:
      region1: zone1,zone2
    region: region1
    service-url:
      zone1: ${LOAD_BALANCER_URL:http://localhost:10201}/zone1/eureka
      zone2: ${LOAD_BALANCER_URL:http://localhost:10202}/zone2/eureka
      eureka-service-url-poll-interval-seconds: 10
  instance:
    prefer-ip-address: true
    #instance-id: ${spring.application.name}:${server.port}
    lease-renewal-interval-in-seconds: 6
    lease-expiration-duration-in-seconds: 10
logging:
  file: /www/logs/${spring.application.name}/spring-boot-logging.log
  
aws:
  microservices:
    sample:
      support:
        auth:
          token-public-key-file: aws.microservices.sample.support.auth.public.cert
          restricted-path: /api/**
          permitted-path: /*, /api/aws-microservices-sample-support-auth/**
  
zuul:
  prefix: /api
  sensitiveHeaders:

hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: THREAD
          thread:
            timeoutInMilliseconds: 15000
ribbon:
  ReadRimeout: 15000
  ConnectTimeout: 15000
  
zuul:
  host:
    connect-timeout-millis: 15000 # starting the connection 
    socket-timeout-millis: 15000  # monitor the continuous incoming data flow
    
    
aws:
  microservices:
    sample:
      common:
        load-weight: 0.1
        load-duration: 100